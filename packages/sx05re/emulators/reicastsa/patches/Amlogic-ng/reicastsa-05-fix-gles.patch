diff -ur 1/core/rend/gles/gldraw.cpp 2/core/rend/gles/gldraw.cpp
--- 1/core/rend/gles/gldraw.cpp	2019-04-01 07:49:01.000000000 -0600
+++ 2/core/rend/gles/gldraw.cpp	2019-04-04 02:10:32.000000000 -0600
@@ -934,9 +934,10 @@
 
 static void SetupMainVBO()
 {
+#if !defined(GLES) || defined(_ANDROID)
 	if (gl.gl_major >= 3)
 		glBindVertexArray(gl.vbo.vao);
-
+#endif
 	glBindBuffer(GL_ARRAY_BUFFER, gl.vbo.geometry); glCheck();
 	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, gl.vbo.idxs); glCheck();
 
@@ -956,9 +957,10 @@
 
 void SetupModvolVBO()
 {
+#if !defined(GLES) || defined(_ANDROID)
 	if (gl.gl_major >= 3)
 		glBindVertexArray(gl.vbo.vao);
-
+#endif
 	glBindBuffer(GL_ARRAY_BUFFER, gl.vbo.modvols); glCheck();
 
 	//setup vertex buffers attrib pointers
diff -ur 1/core/rend/gles/gles.cpp 2/core/rend/gles/gles.cpp
--- 1/core/rend/gles/gles.cpp	2019-04-01 07:49:01.000000000 -0600
+++ 2/core/rend/gles/gles.cpp	2019-04-04 02:10:32.000000000 -0600
@@ -560,7 +560,10 @@
 					return false;
 				}
 #ifdef GLES
+// EGL only supports runtime loading with android? TDB
+#ifdef _ANDROID
 				load_gles_symbols();
+#endif
 #else
 				egl_makecurrent();
 				if (gl3wInit())
@@ -1147,7 +1150,9 @@
 		//create vao
 		//This is really not "proper", vaos are supposed to be defined once
 		//i keep updating the same one to make the es2 code work in 3.1 context
+#if !defined(GLES) || defined(_ANDROID)
 		glGenVertexArrays(1, &gl.vbo.vao);
+#endif
 	}
 
 	//create vbos
@@ -1988,8 +1993,10 @@
 
 	void DrawOSD(bool clear_screen)
 	{
+#if !defined(GLES) || defined(_ANDROID)
 		if (gl.gl_major >= 3)
 			glBindVertexArray(gl.vbo.vao);
+#endif
 		glBindBuffer(GL_ARRAY_BUFFER, gl.vbo.geometry); glCheck();
 		glEnableVertexAttribArray(VERTEX_POS_ARRAY);
 		glVertexAttribPointer(VERTEX_POS_ARRAY, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex,x));
diff -ur 1/core/rend/gles/gles.h 2/core/rend/gles/gles.h
--- 1/core/rend/gles/gles.h	2019-04-01 07:49:01.000000000 -0600
+++ 2/core/rend/gles/gles.h	2019-04-04 02:10:32.000000000 -0600
@@ -15,7 +15,9 @@
 #endif
 #include <GLES32/gl32.h>
 #include <GLES32/gl2ext.h>
+#ifdef _ANDROID
 #include "gl32funcs.h"
+#endif
 
 #ifndef GL_NV_draw_path
 //IMGTEC GLES emulation
diff -ur 1/core/rend/gles/imgui_impl_opengl3.cpp 2/core/rend/gles/imgui_impl_opengl3.cpp
--- 1/core/rend/gles/imgui_impl_opengl3.cpp	2019-04-01 07:49:01.000000000 -0600
+++ 2/core/rend/gles/imgui_impl_opengl3.cpp	2019-04-04 02:10:32.000000000 -0600
@@ -141,6 +141,7 @@
 
     if (save_background)
     {
+#if !defined(GLES) || defined(_ANDROID)
     	if (!gl.is_gles && glReadBuffer != NULL)
     		glReadBuffer(GL_FRONT);
 
@@ -157,6 +158,7 @@
 
 		// Copy the current framebuffer into it
 		glCopyTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, 0, 0, fb_width, fb_height);
+#endif
     }
 
     // Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled, polygon fill
@@ -188,10 +190,12 @@
     glcache.UseProgram(g_ShaderHandle);
     glUniform1i(g_AttribLocationTex, 0);
     glUniformMatrix4fv(g_AttribLocationProjMtx, 1, GL_FALSE, &ortho_projection[0][0]);
+#if !defined(GLES) || defined(_ANDROID)
     if (gl.gl_major >= 3 && glBindSampler != NULL)
     	glBindSampler(0, 0); // We use combined texture/sampler state. Applications using GL 3.3 may set that otherwise.
-
+#endif
     GLuint vao_handle = 0;
+#if !defined(GLES) || defined(_ANDROID)
     if (gl.gl_major >= 3)
     {
 		// Recreate the VAO every time
@@ -199,6 +203,7 @@
 		glGenVertexArrays(1, &vao_handle);
 		glBindVertexArray(vao_handle);
     }
+#endif
     glBindBuffer(GL_ARRAY_BUFFER, g_VboHandle);
     glEnableVertexAttribArray(g_AttribLocationPosition);
     glEnableVertexAttribArray(g_AttribLocationUV);
@@ -247,8 +252,10 @@
             idx_buffer_offset += pcmd->ElemCount;
         }
     }
+#if !defined(GLES) || defined(_ANDROID)
     if (vao_handle != 0)
     	glDeleteVertexArrays(1, &vao_handle);
+#endif
 }
 
 bool ImGui_ImplOpenGL3_CreateFontsTexture()
